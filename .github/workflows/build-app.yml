# ==============================================================================
#                 小米钱包GUI应用 - 多平台构建工作流
# ==============================================================================
#
# 功能:
#   - 自动构建核心平台：Windows、macOS、Android、iOS
#   - 使用Flet官方推荐的构建工具进行打包
#   - 自动发布构建产物到GitHub Releases
#
# 触发条件:
#   - 推送标签时自动构建
#   - 手动触发构建
#
# 基于Flet官方推荐的GitHub Actions配置
# 参考: https://github.com/ndonkoHenri/flet-github-action-workflows
# ==============================================================================

name: 构建多平台Flet应用

# 权限设置
permissions:
  contents: write
  actions: read

# 触发器配置
on:
  # 当推送标签时触发（用于发布版本）
  push:
    tags:
      - 'v*.*.*'
  
  # 手动触发
  workflow_dispatch:

# 任务定义
jobs:
  build:
    name: 构建 ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    
    # 设置环境变量，修复Windows平台Unicode编码问题
    env:
      PYTHONIOENCODING: utf-8
      PYTHONLEGACYWINDOWSSTDIO: utf-8
    
    strategy:
      matrix:
        include:
          # 桌面平台
          - os: windows-latest
            platform: windows
            flet_target: windows
            artifact_name: xiaomi-wallet-gui-windows
            artifact_ext: ".exe"
          - os: macos-latest
            platform: macos
            flet_target: macos
            artifact_name: xiaomi-wallet-gui-macos
            artifact_ext: ".app"
          # 移动平台
          - os: ubuntu-latest
            platform: android
            flet_target: apk
            artifact_name: xiaomi-wallet-gui-android
            artifact_ext: ".apk"
          - os: macos-latest
            platform: ios
            flet_target: ipa
            artifact_name: xiaomi-wallet-gui-ios
            artifact_ext: ".ipa"
          # Web/PWA平台
          - os: ubuntu-latest
            platform: web
            flet_target: web
            artifact_name: xiaomi-wallet-gui-web
            artifact_ext: ".html"
    
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
      
      # 设置Python环境
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      # 设置Flutter SDK
      - name: 设置Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
      
      # 安装系统依赖 (仅Android构建需要)
      - name: 安装系统依赖 (Android)
        if: matrix.platform == 'android'
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
      
      # 安装Android SDK (仅Android构建需要)
      - name: 设置Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
      
      # 接受Android许可证 (仅Android构建需要)
      - name: 接受Android许可证
        if: matrix.platform == 'android'
        run: |
          yes | sdkmanager --licenses || true
      
      # 设置Android环境变量 (仅Android构建需要)
      - name: 设置Android环境变量
        if: matrix.platform == 'android'
        run: |
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "$ANDROID_HOME/tools/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
      
      # 设置Xcode (仅iOS构建需要)
      - name: 设置Xcode
        if: matrix.platform == 'ios'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      # 安装Rosetta 2 (仅iOS构建需要，Apple Silicon Mac)
      - name: 安装Rosetta 2
        if: matrix.platform == 'ios'
        run: |
          sudo softwareupdate --install-rosetta --agree-to-license || true
      
      # 安装CocoaPods (仅iOS构建需要)
      - name: 安装CocoaPods
        if: matrix.platform == 'ios'
        run: |
          sudo gem install cocoapods
      
      # 安装Python依赖
      - name: 安装Python依赖
        run: |
          python -m pip install --upgrade pip
          # 安装项目依赖（包含flet和其他必要依赖）
          pip install .
          # 额外安装flet-cli用于构建
          pip install flet-cli
      
      # 构建应用 - Web/PWA平台
      - name: 构建Web/PWA应用
        if: matrix.platform == 'web'
        run: |
          # 使用flet publish命令构建Web/PWA应用
          flet publish gui.py --app-name "小米钱包助手" --app-short-name "小米钱包" --app-description "小米钱包每日任务自动化助手" --pwa-background-color "#ffffff" --pwa-theme-color "#FF6700" --distpath build/web

      # 构建应用 - 其他平台
      - name: 构建非Web平台应用
        if: matrix.platform != 'web'
        run: |
          # 使用常规build命令构建其他平台应用
          flet build ${{ matrix.flet_target }} --verbose
      
      # 创建发布目录
      - name: 准备发布文件
        shell: bash
        run: |
          mkdir -p release
          
          # 根据平台复制构建产物
          case "${{ matrix.platform }}" in
            "windows")
              cp -r build/windows/* release/ 2>/dev/null || true
              ;;
            "macos")
              cp -r build/macos/* release/ 2>/dev/null || true
              ;;
            "android")
              cp -r build/apk/* release/ 2>/dev/null || true
              find build -name "*.apk" -exec cp {} release/ \; 2>/dev/null || true
              ;;
            "ios")
              cp -r build/ipa/* release/ 2>/dev/null || true
              find build -name "*.ipa" -exec cp {} release/ \; 2>/dev/null || true
              ;;
            "web")
              cp -r build/web/* release/ 2>/dev/null || true
              ;;
          esac
          
          # 添加README和配置文件
          cp README.md release/ 2>/dev/null || true
          echo "[]" > release/xiaomiconfig.json
      
      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/
          retention-days: 30
  
  # 发布任务（仅在推送标签时执行）
  release:
    name: 创建GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
      
      # 下载所有构建产物
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      # 打包构建产物
      - name: 打包构建产物
        run: |
          cd artifacts
          
          # 桌面平台
          if [ -d "xiaomi-wallet-gui-windows" ]; then
            cd xiaomi-wallet-gui-windows
            zip -r ../xiaomi-wallet-gui-windows.zip .
            cd ..
          fi
          
          if [ -d "xiaomi-wallet-gui-macos" ]; then
            cd xiaomi-wallet-gui-macos
            tar -czf ../xiaomi-wallet-gui-macos.tar.gz .
            cd ..
          fi
          
          # 移动平台
          if [ -d "xiaomi-wallet-gui-android" ]; then
            cd xiaomi-wallet-gui-android
            zip -r ../xiaomi-wallet-gui-android.zip .
            cd ..
          fi
          
          if [ -d "xiaomi-wallet-gui-ios" ]; then
            cd xiaomi-wallet-gui-ios
            zip -r ../xiaomi-wallet-gui-ios.zip .
            cd ..
          fi
          
          # Web/PWA平台
          if [ -d "xiaomi-wallet-gui-web" ]; then
            cd xiaomi-wallet-gui-web
            zip -r ../xiaomi-wallet-gui-web.zip .
            cd ..
          fi
      
      # 创建GitHub Release
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/xiaomi-wallet-gui-windows.zip
            artifacts/xiaomi-wallet-gui-macos.tar.gz
            artifacts/xiaomi-wallet-gui-android.zip
            artifacts/xiaomi-wallet-gui-ios.zip
            artifacts/xiaomi-wallet-gui-web.zip
          body: |
            ## 小米钱包多平台应用 ${{ github.ref_name }}
            
            ### 📱 移动端下载
            - **Android用户**: 下载 `xiaomi-wallet-gui-android.zip`，解压后安装 `.apk` 文件
            - **iOS用户**: 下载 `xiaomi-wallet-gui-ios.zip`，解压后通过Xcode或TestFlight安装 `.ipa` 文件
            
            ### 💻 桌面端下载
            - **Windows用户**: 下载 `xiaomi-wallet-gui-windows.zip`，解压后运行可执行文件
            - **macOS用户**: 下载 `xiaomi-wallet-gui-macos.tar.gz`，解压后运行 `.app` 文件
            
            ### 🌐 Web/PWA版本
            - **所有用户**: 下载 `xiaomi-wallet-gui-web.zip`，解压后使用浏览器打开 `index.html` 文件
            - **PWA安装**: 在支持PWA的浏览器中（如Chrome、Edge），打开后可点击地址栏中的安装按钮将应用安装到桌面或移动设备
            
            ### 🚀 使用方法
            1. 根据您的设备选择对应版本下载
            2. 解压下载的文件
            3. 首次运行时，程序会创建空的 `xiaomiconfig.json` 配置文件
            4. 使用界面添加账号并执行任务
            
            ### ⚠️ 注意事项
            - 请确保网络连接正常
            - 首次使用需要扫码登录小米账号
            - 配置文件会保存在程序目录下
            - Android版本需要允许安装未知来源应用
            - iOS版本可能需要信任开发者证书
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}